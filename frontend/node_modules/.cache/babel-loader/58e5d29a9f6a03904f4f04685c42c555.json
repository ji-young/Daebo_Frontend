{"ast":null,"code":"var _jsxFileName = \"/Users/Jiyoung/Daebo_Project/frontend/src/components/global/BaseContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { setUserInfo } from 'store/actions/index';\nimport axios from 'axios';\nexport class BaseContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkUser = () => {\n      const {\n        setUserTemp,\n        history\n      } = this.props; // 먼저 localStorage에 값이 저장되있는지 확인, userInfo값이 있다면, 로그인을 한것으로 인식하고,\n      // 바로 setUserTemp를 실시.\n      // 이를 하는 이유는 새로고침 했을시, state가 초기화 되어 logged값도 false로 바뀌는데, 새로고침 했을시\n      // 로그인을 유지하기 위함.\n      // if (localStorage.getItem(\"userInfo\")) {\n      //   const getuserInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n      //   setUserTemp({\n      //     token: getuserInfo.token,\n      //     username: getuserInfo.name.username,\n      //   });\n      //   axios.defaults.headers.common['Authorization'] = `jwt ${getuserInfo.token}`;\n      //   return;\n      // }\n      // 만약 userInfo값이 localStorage에 없을때에는, api통신을 실시.\n      // 만약 checkUser가 실패 했다면, logged는 false로 바뀌므로, 로그인 페이지로 이동시킨다.\n      // 또한, /auth/register에서는 /auth/login으로 이동할 필요가 없으므로, auth라는 path가 url에 포함될때는 제외시킨다\n      // if (!this.props.userinfo.auth && !window.location.pathname.includes(\"Join\")) {\n      //   history.push(\"/Login\");\n      // }\n    };\n  }\n\n  componentDidMount() {\n    console.log('base');\n    this.checkUser();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userinfo: state.userinfo\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserTemp: userinfo => {\n      dispatch(setUserInfo(userinfo));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaseContainer));","map":{"version":3,"sources":["/Users/Jiyoung/Daebo_Project/frontend/src/components/global/BaseContainer.js"],"names":["React","Component","connect","withRouter","setUserInfo","axios","BaseContainer","checkUser","setUserTemp","history","props","componentDidMount","console","log","render","mapStateToProps","state","userinfo","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAM3CM,SAN2C,GAM/B,MAAM;AAChB,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAA2B,KAAKC,KAAtC,CADgB,CAGhB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACD,KAlC0C;AAAA;;AAC3CC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,SAAKN,SAAL;AACD;;AAgCDO,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAtC0C;;AAyC7C,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,QAAQ,EAAED,KAAK,CAACC;AADgB,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLX,IAAAA,WAAW,EAAIS,QAAF,IAAgB;AAC3BE,MAAAA,QAAQ,CAACf,WAAW,CAAEa,QAAF,CAAZ,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAed,UAAU,CACvBD,OAAO,CACLa,eADK,EAELG,kBAFK,CAAP,CAGEZ,aAHF,CADuB,CAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport {setUserInfo} from 'store/actions/index' \nimport axios from 'axios'\nexport class BaseContainer extends Component {\n  componentDidMount() {\n    console.log('base')\n    this.checkUser();\n  }\n\n  checkUser = () => {\n    const { setUserTemp, history } = this.props;\n\n    // 먼저 localStorage에 값이 저장되있는지 확인, userInfo값이 있다면, 로그인을 한것으로 인식하고,\n    // 바로 setUserTemp를 실시.\n    // 이를 하는 이유는 새로고침 했을시, state가 초기화 되어 logged값도 false로 바뀌는데, 새로고침 했을시\n    // 로그인을 유지하기 위함.\n    // if (localStorage.getItem(\"userInfo\")) {\n    //   const getuserInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n \n    //   setUserTemp({\n    //     token: getuserInfo.token,\n    //     username: getuserInfo.name.username,\n    //   });\n\n    //   axios.defaults.headers.common['Authorization'] = `jwt ${getuserInfo.token}`;\n      \n    //   return;\n    // }\n\n    // 만약 userInfo값이 localStorage에 없을때에는, api통신을 실시.\n   \n\n    // 만약 checkUser가 실패 했다면, logged는 false로 바뀌므로, 로그인 페이지로 이동시킨다.\n    // 또한, /auth/register에서는 /auth/login으로 이동할 필요가 없으므로, auth라는 path가 url에 포함될때는 제외시킨다\n    // if (!this.props.userinfo.auth && !window.location.pathname.includes(\"Join\")) {\n    //   history.push(\"/Login\");\n    // }\n  };\n\n  render() {\n    return <div />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  userinfo: state.userinfo\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserTemp: ( userinfo ) => {\n      dispatch(setUserInfo( userinfo ));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(BaseContainer)\n);"]},"metadata":{},"sourceType":"module"}