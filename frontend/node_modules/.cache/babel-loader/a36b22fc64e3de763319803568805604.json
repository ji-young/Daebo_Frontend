{"ast":null,"code":"import _classCallCheck from\"/Users/Jiyoung/Daebo_Project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/Jiyoung/Daebo_Project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/Jiyoung/Daebo_Project/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/Jiyoung/Daebo_Project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{connect}from\"react-redux\";import{withRouter}from\"react-router-dom\";import{setUserInfo}from'store/actions/index';import axios from'axios';export var BaseContainer=/*#__PURE__*/function(_Component){_inherits(BaseContainer,_Component);var _super=_createSuper(BaseContainer);function BaseContainer(){var _this;_classCallCheck(this,BaseContainer);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.checkUser=function(){var _this$props=_this.props,setUserTemp=_this$props.setUserTemp,history=_this$props.history;// 먼저 localStorage에 값이 저장되있는지 확인, userInfo값이 있다면, 로그인을 한것으로 인식하고,\n// 바로 setUserTemp를 실시.\n// 이를 하는 이유는 새로고침 했을시, state가 초기화 되어 logged값도 false로 바뀌는데, 새로고침 했을시\n// 로그인을 유지하기 위함.\n// if (localStorage.getItem(\"userInfo\")) {\n//   const getuserInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n//   setUserTemp({\n//     token: getuserInfo.token,\n//     username: getuserInfo.name.username,\n//   });\n//   axios.defaults.headers.common['Authorization'] = `jwt ${getuserInfo.token}`;\n//   return;\n// }\n// 만약 userInfo값이 localStorage에 없을때에는, api통신을 실시.\n// 만약 checkUser가 실패 했다면, logged는 false로 바뀌므로, 로그인 페이지로 이동시킨다.\n// 또한, /auth/register에서는 /auth/login으로 이동할 필요가 없으므로, auth라는 path가 url에 포함될때는 제외시킨다\n// if (!this.props.userinfo.auth && !window.location.pathname.includes(\"Join\")) {\n//   history.push(\"/Login\");\n// }\n};return _this;}_createClass(BaseContainer,[{key:\"componentDidMount\",value:function componentDidMount(){console.log('base');this.checkUser();}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null);}}]);return BaseContainer;}(Component);var mapStateToProps=function mapStateToProps(state){return{userinfo:state.userinfo};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{setUserTemp:function setUserTemp(userinfo){dispatch(setUserInfo(userinfo));}};};export default withRouter(connect(mapStateToProps,mapDispatchToProps)(BaseContainer));","map":{"version":3,"sources":["/Users/Jiyoung/Daebo_Project/frontend/src/components/global/BaseContainer.js"],"names":["React","Component","connect","withRouter","setUserInfo","axios","BaseContainer","checkUser","props","setUserTemp","history","console","log","mapStateToProps","state","userinfo","mapDispatchToProps","dispatch"],"mappings":"gdAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAAQC,WAAR,KAA0B,qBAA1B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,UAAaC,CAAAA,aAAb,uVAMEC,SANF,CAMc,UAAM,iBACiB,MAAKC,KADtB,CACRC,WADQ,aACRA,WADQ,CACKC,OADL,aACKA,OADL,CAGhB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACD,CAlCH,sGACsB,CAClBC,OAAO,CAACC,GAAR,CAAY,MAAZ,EACA,KAAKL,SAAL,GACD,CAJH,uCAoCW,CACP,mBAAO,+BAAP,CACD,CAtCH,2BAAmCN,SAAnC,EAyCA,GAAMY,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAChCC,QAAQ,CAAED,KAAK,CAACC,QADgB,CAAL,EAA7B,CAIA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACrC,MAAO,CACLR,WAAW,CAAE,qBAAEM,QAAF,CAAgB,CAC3BE,QAAQ,CAACb,WAAW,CAAEW,QAAF,CAAZ,CAAR,CACD,CAHI,CAAP,CAKD,CAND,CAQA,cAAeZ,CAAAA,UAAU,CACvBD,OAAO,CACLW,eADK,CAELG,kBAFK,CAAP,CAGEV,aAHF,CADuB,CAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport {setUserInfo} from 'store/actions/index' \nimport axios from 'axios'\nexport class BaseContainer extends Component {\n  componentDidMount() {\n    console.log('base')\n    this.checkUser();\n  }\n\n  checkUser = () => {\n    const { setUserTemp, history } = this.props;\n\n    // 먼저 localStorage에 값이 저장되있는지 확인, userInfo값이 있다면, 로그인을 한것으로 인식하고,\n    // 바로 setUserTemp를 실시.\n    // 이를 하는 이유는 새로고침 했을시, state가 초기화 되어 logged값도 false로 바뀌는데, 새로고침 했을시\n    // 로그인을 유지하기 위함.\n    // if (localStorage.getItem(\"userInfo\")) {\n    //   const getuserInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n \n    //   setUserTemp({\n    //     token: getuserInfo.token,\n    //     username: getuserInfo.name.username,\n    //   });\n\n    //   axios.defaults.headers.common['Authorization'] = `jwt ${getuserInfo.token}`;\n      \n    //   return;\n    // }\n\n    // 만약 userInfo값이 localStorage에 없을때에는, api통신을 실시.\n   \n\n    // 만약 checkUser가 실패 했다면, logged는 false로 바뀌므로, 로그인 페이지로 이동시킨다.\n    // 또한, /auth/register에서는 /auth/login으로 이동할 필요가 없으므로, auth라는 path가 url에 포함될때는 제외시킨다\n    // if (!this.props.userinfo.auth && !window.location.pathname.includes(\"Join\")) {\n    //   history.push(\"/Login\");\n    // }\n  };\n\n  render() {\n    return <div />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  userinfo: state.userinfo\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserTemp: ( userinfo ) => {\n      dispatch(setUserInfo( userinfo ));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(BaseContainer)\n);"]},"metadata":{},"sourceType":"module"}